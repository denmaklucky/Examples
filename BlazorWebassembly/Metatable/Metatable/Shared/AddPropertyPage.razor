@using Metatable.Enums
@using Metatable.Models

<div>
    <div>
        <label class="col-form-label">Name:</label>
        <input type="text" class="form-control " @bind="Property.Name" @onfocusout="CheckAvailableName" style="@BorderStyle">
    </div>

    <div>
        <label class="col-form-label">Type:</label>
        <select class="custom-select form-select-sm">
            @foreach (PropertyType type in Enum.GetValues(typeof(PropertyType)))
            {
                <option value="@type">@type</option>
            }
        </select>
    </div>

    <div>
        <label class="col-form-label">Value:</label>
        <input type="text" class="form-control" @bind="Property.Value">
    </div>

    <div class="modal-footer">
        <button @onclick="OnOkClick" class="btn btn-primary">Save</button>
        <button @onclick="OnCancelClick" class="btn btn-secondary">Cancel</button>
    </div>

</div>


@code {

    [CascadingParameter] 
    BlazoredModalInstance ModalInstance { get; set; }
    
    [Parameter]
    public MetaProperty Property { get; set; }
    
    [Parameter]
    public List<string> NotAvailableNames { get; set; }

    public string BorderStyle = "";

    protected override Task OnInitializedAsync()
    {
        Property ??= new MetaProperty();
        return base.OnInitializedAsync();
    }

    void CheckAvailableName()
    {
        if (NotAvailableNames.Contains(Property.Name))
        {
            BorderStyle = "border-color:red;";
            return;
        }

        BorderStyle = "";
        
    }

    void OnOkClick()
    {
        ModalInstance.CloseAsync(ModalResult.Ok(Property));
    }

    void OnCancelClick()
    {
        ModalInstance.CancelAsync();
    }
}