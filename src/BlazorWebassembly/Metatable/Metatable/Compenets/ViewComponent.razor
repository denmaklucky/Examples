@using Metatable.Models
<h3>@Model.Name</h3>

@if (Model == null)
{
    <div>
        <span>table is null</span>
    </div>
}
else
{
    <table class="table">
        <thead>
        <tr>
            @foreach (var column in Model.Objects.FirstOrDefault().Properties.Where(c => !c.IsHidden).GroupBy(c => c.Name).Select(g => g.Key))
            {
                <th>
                    @column <button type="button" class="btn btn-link" @onclick="@(() => EditProperty(@column))">Edit</button>
                </th>
            }
            <th>
                <button type="button" class="btn btn-outline-success" @onclick="AddNewProperty">Add column</button>
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (var metaObject in Model.Objects)
        {
            <tr>
                @foreach (var data in metaObject.Properties.Where(p => !p.IsHidden))
                {
                    <td>@data.Value</td>
                }
                <td></td>
            </tr>
        }
        </tbody>
    </table>
}


@code {
    int _count;

    [Parameter]
    public View Model { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    async void AddNewProperty()
    {
        var parameters = new ModalParameters();
        parameters.Add("NotAvailableNames", Model.Objects.FirstOrDefault()?.Properties.Select(p => p.Name).ToList());
        var modal = Modal.Show<AddPropertyPage>("Add property", parameters, new ModalOptions
        {
            HideCloseButton = true
        });
        var result = await modal.Result;

        if (result != null)
        {
            var newProperty = (MetaProperty) result.Data;
            foreach (var metaObject in Model.Objects)
            {
                metaObject.Properties.Add(newProperty);
            }
        }
        
        StateHasChanged();
    }

    async void EditProperty(string propertyName)
    {
        if (string.IsNullOrEmpty(propertyName))
            return;

        var property = Model.Objects.FirstOrDefault()?.Properties.FirstOrDefault(p => p.Name == propertyName);
        if (property != null)
        {
            var parameters = new ModalParameters();
            parameters.Add("Property", property);
            parameters.Add("NotAvailableNames", Model.Objects.FirstOrDefault()?.Properties.Where( p => p.Name != propertyName)
                .Select(p => p.Name).ToList());
            var modal = Modal.Show<AddPropertyPage>("Add property", parameters, new ModalOptions
            {
                HideCloseButton = true
            });
            var result = await modal.Result;

            if (result != null)
            {
                var newProperty = (MetaProperty) result.Data;
                var obj = Model.Objects.FirstOrDefault();
                if (obj != null)
                {
                    var index = obj.Properties.IndexOf(property);
                    obj.Properties.Remove(property);
                    obj.Properties.Insert(index, newProperty);
                }
            }
        }
        
        StateHasChanged();
    }

}