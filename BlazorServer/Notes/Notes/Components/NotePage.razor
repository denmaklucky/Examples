@using Notes.Models
@inject INoteService NoteService

<div class="container mw-100">
    <div class="row">
        <div class="col-4 clr-main">
            <header class="border-bottom">
                <div class="list-head-padding">
                    <div class="row">
                        <div class="col-2">
                            <h4>Notes</h4>
                        </div>
                        <div class="ml-auto mr-3">
                            <button class="btn btn-primary" @onclick="OnCreateNewNote">Add</button>
                        </div>
                    </div>
                </div>
            </header>
            <div class="vh-91">
                @if (Notes != null)
                {
                    @foreach (var note in Notes)
                    {
                        <NoteComponent Model="note" OnClickNoteCallBack="OnClickNoteCallBack" />
                    }
                }
                else
                {
                    <span>@LoadingText</span>
                }
            </div>
        </div>
        <div id="noteCard" class="col-8">
            <EditNote Model="SelectedNote" GoBack="OnGoBack" DeletedEvent="OnDeletedNote"/>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public IList<Note> Notes { get; set; }

    public Note SelectedNote { get; set; }

    public string LoadingText { get; set; } = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        if (Notes == null)
            Notes = await NoteService.GetNotes();

        LoadingText = "You haven't notes!";
    }

    public void OnClickNoteCallBack(Note selectedNote)
        => SelectedNote = selectedNote;

    public void OnGoBack()
        => SelectedNote = null;

    public void OnCreateNewNote()
    {
        var newNote = new Note();
        SelectedNote = newNote;
        Notes.Add(newNote);
    }

    public void OnDeletedNote(int noteId)
        => Notes.Remove(Notes.First(n => n.Id == noteId));
}
