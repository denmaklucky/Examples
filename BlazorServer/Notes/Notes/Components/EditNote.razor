@inject INoteService NoteService

@if (Model == null)
{
    <div class="text-center">
        <span>Select notes for the left!</span>
    </div>
}
else
{
    <EditForm Model="Model" OnValidSubmit="OnSumbmit">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label class="form-check-label">Title</label>
            <input @bind="Model.Title" class="form-control" />
            <ValidationMessage For="@(() => Model.Title)" />
        </div>

        <br />

        <div class="form-group">
            <label class="form-check-label">Description</label>
            <InputTextArea @bind-Value="Model.Description" class="form-control" />
            <ValidationMessage For="@(() => Model.Description)" />
        </div>

        <br />

        <div class="text-right">
            <img src="images/ajax-loader.gif" class="@LoadingClass" />
            <button class="btn btn-success" type="submit">Save</button>
            <button class="btn btn-danger" @onclick="OnDelete">Delete</button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public Note Model { get; set; }

    [Parameter]
    public EventCallback GoBack { get; set; }

    [Parameter]
    public EventCallback<int> DeletedEvent { get; set; }

    public string LoadingClass { get; set; } = "d-none";

    public async Task OnSumbmit()
    {
        LoadingClass = "";
        await NoteService.CreateOrUpdate(Model);
        await GoBack.InvokeAsync(this);
        LoadingClass = "d-none";
    }

    public async Task OnDelete()
    {
        LoadingClass = "";
        await NoteService.Delete(Model.Id);
        await DeletedEvent.InvokeAsync(Model.Id);
        LoadingClass = "d-none";
    }
}
